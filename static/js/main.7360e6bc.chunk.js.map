{"version":3,"sources":["components/Tile.js","components/functions/checkPrediction.js","components/functions/randomNum.js","components/functions/randomNumRange.js","components/functions/botLogic.js","components/functions/shipList.js","components/functions/createAllShips.js","components/Board.js","components/Game.js","App.js","index.js"],"names":["Tile","id","taken","type","click","hit","check","number","data-taken","data-hit","data-testid","data-type","className","includes","onClick","checkPrediction","num","randomNum","max","Math","floor","random","randomNumRange","min","checkRelative","arr","curHit","tiles","every","item","makeMove","prediction","getPos","newArr","args","turn","setRotate","lastHit","setLastHit","firstHit","setRestart","setTiles","updateHits","console","log","old","makePredictedMove","makeCompMove","doubleCheckRelative","player","setFirstHit","randomMove","rotate","pos","slice","predictMove","shipList","shipType","sizeHor","sizeVer","hits","sunk","key","createShip","i","ships","directions","chooseDirection","width","start","length","some","index","checkEdge","checkTaken","checkPosition","map","position","createAllShips","Board","gameStatus","setGameStatus","setTurn","restart","resetGame","useState","setSunk","setShips","newTiles","createTiles","push","useEffect","findShip","findIndex","ship","handleClick","e","preventDefault","target","hitValue","getAttribute","tileType","tilePos","Number","prev","winner","filtered","filter","addToSunk","Game","setResetGame","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7360e6bc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/tile.css';\n\nconst Tile = ({ id, taken, type, click, hit, number }) => {\n  //pass down state and arrays\n  //add taken attribute\n  const check = taken === true;\n  const setTileClass = () => {\n    if (hit === true && type !== 'tile') {\n      return 'hit';\n    } else if (hit === true && type === 'tile') {\n      return 'miss';\n    } else if (id.includes('comp')) {\n      return 'tile';\n    } else if (hit === false && type !== 'tile') {\n      return 'ship';\n    } else {\n      return 'tile';\n    }\n  };\n\n  return (\n    <div\n      id={id}\n      data-taken={check ? true : false}\n      data-hit={hit}\n      data-testid={'tile'}\n      data-type={type}\n      className={setTileClass()}\n      onClick={click}\n    ></div>\n  );\n};\n\nexport default Tile;\n","const checkPrediction = (num) => {\n  if (num < 0 || num > 99) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport default checkPrediction;\n","//+ random int\nconst randomNum = (max) => {\n  return Math.floor(Math.random() * max);\n};\n\nexport default randomNum;\n","//+ random from range\nconst randomNumRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport default randomNumRange;\n","import checkPrediction from './checkPrediction';\nimport randomNum from './randomNum';\nimport randomNumRange from './randomNumRange';\n\n//+ make random move\nconst randomMove = ({ ...args }) => {\n  const { tiles, setTiles, updateHits, setLastHit, setFirstHit } = { ...args };\n  console.log('random move');\n  const random = randomNum(99);\n  if (tiles[random].hit === false) {\n    setTiles((old) => [...old], {\n      [tiles[random]]: (tiles[random].hit = true),\n    });\n    updateHits(tiles[random].type);\n    if (tiles[random].type !== 'tile') {\n      setLastHit(random);\n      setFirstHit(random);\n    }\n  } else {\n    //!\n    makeCompMove({ ...args });\n  }\n};\n\n//+ check prediction is in bounds then check array to see if all tiles hit\nconst checkRelative = (arr, curHit, tiles) =>\n  arr.every((item) => {\n    if (checkPrediction(item + curHit) === false) {\n      if (tiles[curHit + item].hit === true) {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  });\n\n//+ check array to see if all tiles hit\n\nconst doubleCheckRelative = (arr, curHit, tiles) => {\n  arr.every((item) => {\n    if (tiles[curHit + item].hit === true) {\n      return true;\n    }\n  });\n};\n\n//+ execute the predicted move\nconst makePredictedMove = ({ ...args }, prediction, getPos) => {\n  const { tiles, setTiles, updateHits, setRotate, setLastHit } = { ...args };\n  console.log('make predicted move');\n  setTiles((old) => [...old], {\n    [tiles[prediction]]: (tiles[prediction].hit = true),\n  });\n  updateHits(tiles[prediction].type);\n  if (tiles[prediction].type !== 'tile') {\n    setLastHit(prediction);\n    // set ship rotation\n    if (getPos === -10 || getPos === 10) {\n      setRotate([2, 3]);\n    } else {\n      setRotate([0, 1]);\n    }\n  }\n};\n\n//+ make moves if prediction is a valid tile\nconst makeMove = ({ ...args }, prediction, getPos, newArr) => {\n  const { tiles, turn, setRotate, lastHit, setLastHit, firstHit, setRestart } =\n    { ...args };\n\n  if (tiles[prediction].hit === false) {\n    makePredictedMove({ ...args }, prediction, getPos);\n  } else if (checkRelative(newArr, lastHit, tiles) === false) {\n    console.log('make move if available tiles after lastHit');\n    //!\n    makeCompMove({ ...args });\n  } else if (checkRelative(newArr, firstHit, tiles) === false) {\n    // check first hit\n    console.log('go back to first hit and predict');\n    setLastHit(firstHit);\n    setRestart('restart' + turn);\n  } else {\n    console.log('decide reset hit or set last hit as first');\n    setRotate([0, 3]);\n    if (doubleCheckRelative(newArr, firstHit, tiles) === false) {\n      setLastHit(firstHit);\n    } else {\n      setLastHit(-100);\n    }\n    setRestart('restart' + turn);\n  }\n};\n\n//+ make predicted move\nconst predictMove = ({ ...args }) => {\n  const {\n    tiles,\n    turn,\n    lastHit,\n    rotate,\n    setRotate,\n    setLastHit,\n    firstHit,\n    setRestart,\n  } = { ...args };\n  let pos = [-1, 1, -10, 10];\n  const getPos = pos[randomNumRange(rotate[0], rotate[1])];\n  const prediction = lastHit + getPos;\n  const newArr = pos.slice(rotate[0], rotate[1] + 1);\n\n  if (checkPrediction(prediction) === false) {\n    makeMove({ ...args }, prediction, getPos, newArr);\n  } else if (checkRelative(newArr, lastHit, tiles) === true) {\n    console.log('all tiles invalid reset');\n    setRotate([0, 3]);\n    setLastHit(firstHit);\n    setRestart('restart' + turn);\n  } else {\n    console.log('restart make comp move');\n    //!\n    makeCompMove({ ...args });\n  }\n};\n\n//# make comp move\nconst makeCompMove = ({ ...args }) => {\n  console.log('make comp move');\n  const { player, turn, lastHit } = { ...args };\n  if (player === 'user' && turn > 0) {\n    if (lastHit === -100) {\n      randomMove({ ...args });\n    } else {\n      predictMove({ ...args });\n    }\n  }\n};\n\nexport default makeCompMove;\n","let shipList = (player) => [\n  {\n    shipType: 'Carrier',\n    sizeHor: [0, 1, 2, 3, 4],\n    sizeVer: [0, 10, 20, 30, 40],\n    hits: 0,\n    sunk: false,\n    key: `${player} Carrier`,\n  },\n  {\n    shipType: 'Battleship',\n    sizeHor: [0, 1, 2, 3],\n    sizeVer: [0, 10, 20, 30],\n    hits: 0,\n    sunk: false,\n    key: `${player} Battleship`,\n  },\n  {\n    shipType: 'Cruiser',\n    sizeHor: [0, 1, 2],\n    sizeVer: [0, 10, 20],\n    hits: 0,\n    sunk: false,\n    key: `${player} Cruiser`,\n  },\n  {\n    shipType: 'Submarine',\n    sizeHor: [0, 1, 2],\n    sizeVer: [0, 10, 20],\n    hits: 0,\n    sunk: false,\n    key: `${player} Submarine`,\n  },\n  {\n    shipType: 'Destroyer',\n    sizeHor: [0, 1],\n    sizeVer: [0, 10],\n    hits: 0,\n    sunk: false,\n    key: `${player} Destroyer`,\n  },\n];\n\nexport default shipList;\n","import randomNum from './randomNum';\n\n//+ Check for edge\nconst checkEdge = (directions, start) => {\n  if (\n    directions.some((index) => {\n      if (start % 10 !== 0 && (start + index) % 10 === 0) {\n        return true;\n      }\n    })\n  ) {\n    return true;\n  }\n};\n//+ Check for other ships\nconst checkTaken = (directions, start, arr) => {\n  if (\n    directions.some((index) => {\n      if (arr[start + index].taken === true) {\n        return true;\n      }\n    })\n  ) {\n    return true;\n  }\n};\n\n//+ check for edge and other ships\nconst checkPosition = (start, directions, arr) => {\n  if (\n    checkEdge(directions, start) === true ||\n    checkTaken(directions, start, arr) === true\n  ) {\n    return true;\n  }\n};\n\n//+ decide direction\nconst chooseDirection = (i, ships) => {\n  if (randomNum(2) === 1) {\n    return ships[i].sizeHor;\n  } else {\n    return ships[i].sizeVer;\n  }\n};\n\n//+ create a ship\nconst createShip = (i, arr, ships) => {\n  const directions = chooseDirection(i, ships);\n  let width = 1;\n  if (directions === ships[i].sizeVer) {\n    width = 10;\n  }\n  const start = randomNum(arr.length - directions.length * width);\n  const type = ships[i].shipType;\n  if (checkPosition(start, directions, arr) !== true) {\n    directions.map((position) => {\n      arr[start + position].taken = true;\n      arr[start + position].type = type;\n    });\n  } else {\n    createShip(i, arr, ships);\n  }\n};\n\n//+ loop and create all ships\nconst createAllShips = (arr, ships) => {\n  for (let i = 0; i < 5; i++) {\n    createShip(i, arr, ships);\n  }\n};\n\nexport {\n  checkEdge,\n  checkTaken,\n  checkPosition,\n  chooseDirection,\n  createShip,\n  createAllShips,\n};\n","import React, { useState, useEffect } from 'react';\nimport Tile from './Tile';\nimport '../styles/board.css';\nimport makeCompMove from './functions/botLogic';\nimport shipList from './functions/shipList';\nimport { createAllShips } from './functions/createAllShips.js';\n\nconst Board = ({\n  player,\n  gameStatus,\n  setGameStatus,\n  turn,\n  setTurn,\n  restart,\n  setRestart,\n  resetGame,\n}) => {\n  const [tiles, setTiles] = useState([]);\n  const [lastHit, setLastHit] = useState(-100);\n  const [firstHit, setFirstHit] = useState('');\n  const [rotate, setRotate] = useState([0, 3]);\n  const [sunk, setSunk] = useState([]);\n  const [ships, setShips] = useState(shipList(player));\n  let newTiles = [];\n\n  //+ create tiles\n  const createTiles = () => {\n    for (let i = 0; i < 100; i++) {\n      newTiles.push({\n        key: i + player,\n        id: i + player,\n        taken: false,\n        type: 'tile',\n        hit: false,\n        number: i,\n      });\n    }\n  };\n\n  //+ create tiles and ships on load\n  useEffect(() => {\n    // create tiles then set array as state\n    createTiles();\n    createAllShips(newTiles, ships);\n    setTiles(newTiles);\n  }, []);\n\n  //+ update ship stats\n  const updateHits = (type) => {\n    if (type !== 'tile') {\n      const findShip = ships.findIndex((ship) => ship.shipType === type);\n      setShips((old) => [...old], {\n        [ships[findShip]]: (ships[findShip].hits = ships[findShip].hits + 1),\n      });\n      if (ships[findShip].hits === ships[findShip].sizeHor.length) {\n        setShips((old) => [...old], {\n          [ships[findShip]]: (ships[findShip].sunk = true),\n        });\n      }\n    }\n  };\n\n  //# on click function\n  const handleClick = (e) => {\n    e.preventDefault();\n    const { id } = e.target;\n    const hitValue = e.target.getAttribute('data-hit');\n    const tileType = e.target.getAttribute('data-type');\n    if (\n      gameStatus === 'playing' &&\n      hitValue === 'false' &&\n      id.includes('comp')\n    ) {\n      const tilePos = Number(id.slice(0, -4));\n      setTiles((old) => [...old], {\n        [tiles[tilePos]]: (tiles[tilePos].hit = true),\n      });\n      updateHits(tileType);\n      setTurn((prev) => prev + 1);\n    }\n  };\n\n  //+ reset last hit and rotation on ship sunk\n  useEffect(() => {\n    setLastHit(-100);\n    setRotate([0, 3]);\n  }, [sunk]);\n\n  //+ on turn or restart update move\n  useEffect(() => {\n    makeCompMove({\n      tiles,\n      setTiles,\n      updateHits,\n      player,\n      turn,\n      rotate,\n      setRotate,\n      lastHit,\n      setLastHit,\n      firstHit,\n      setFirstHit,\n      setRestart,\n    });\n  }, [turn, restart]);\n\n  //+ set sunk list function and game over\n  const addToSunk = () => {\n    const filtered = ships.filter((ship) => ship.hits === ship.sizeHor.length);\n    let winner;\n    if (player === 'comp') {\n      winner = 'Player';\n    } else {\n      winner = 'Computer';\n    }\n    if (filtered.length === 5) {\n      setGameStatus(`Game Over ${winner} Wins`);\n    }\n    if (filtered.length > sunk.length) {\n      setSunk(filtered);\n    }\n  };\n\n  //+ add to sunk on ship update\n  useEffect(() => {\n    addToSunk();\n  }, [ships]);\n\n  //+ reset the game\n  useEffect(() => {\n    newTiles = [];\n    createTiles();\n    setLastHit(-100);\n    setFirstHit('');\n    setRotate([0, 3]);\n    setSunk([]);\n    setRestart('');\n    setTurn(0);\n    setGameStatus('playing');\n    setShips(shipList(player));\n    createAllShips(newTiles, ships);\n    setTiles(newTiles);\n  }, [resetGame]);\n\n  return (\n    <div>\n      <div id={player} className=\"board\">\n        {tiles.map((item) => {\n          return (\n            <Tile\n              key={item.key}\n              id={item.id}\n              taken={item.taken}\n              type={item.type}\n              hit={item.hit}\n              click={handleClick}\n            />\n          );\n        })}\n      </div>\n      <div className=\"sunk-list\">\n        <p className=\"sunk-text\">Sunk:</p>\n        {ships.map((item) => {\n          if (item.sunk) {\n            return (\n              <p className=\"sunk-text\" key={`${item.shipType} ${player}`}>\n                {item.shipType + ','}\n              </p>\n            );\n          }\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport Board from './Board';\nimport '../styles/game.css';\n\nconst Game = () => {\n  const [gameStatus, setGameStatus] = useState('playing');\n  const [restart, setRestart] = useState('');\n  const [turn, setTurn] = useState(0);\n  const [resetGame, setResetGame] = useState(false);\n\n  const handleReset = () => {\n    resetGame ? setResetGame(false) : setResetGame(true);\n  };\n\n  return (\n    <div id=\"game-container\">\n      <p id=\"game-over\">React Battleship</p>\n      <div id=\"game\">\n        <Board\n          player=\"user\"\n          gameStatus={gameStatus}\n          setGameStatus={setGameStatus}\n          turn={turn}\n          setTurn={setTurn}\n          restart={restart}\n          setRestart={setRestart}\n          resetGame={resetGame}\n          setResetGame={setResetGame}\n        />\n        <Board\n          player=\"comp\"\n          gameStatus={gameStatus}\n          setGameStatus={setGameStatus}\n          turn={turn}\n          setTurn={setTurn}\n          restart={restart}\n          setRestart={setRestart}\n          resetGame={resetGame}\n          setResetGame={setResetGame}\n        />\n      </div>\n      <p id=\"game-over\">\n        {gameStatus !== 'playing' ? gameStatus : 'Turn: ' + turn}\n      </p>\n      <button id=\"reset-button\" onClick={handleReset}>\n        Reset\n      </button>\n    </div>\n  );\n};\n\nexport default Game;\n","import './styles/App.css';\nimport React from 'react';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}